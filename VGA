module VGA_1(
input clk ,
input reset,
output hsync,
output vsync,
output reg[3:0] red,
output reg[3:0]green,
output reg[3:0] blue
  );
 
  localparam H_visible = 640 , H_front = 16, H_sync = 96 ,H_back = 48 , H_total = 800;
  localparam V_visible = 480 , V_front = 10, V_sync = 2 ,V_back = 33 , V_total = 525;
  reg[1:0] clk_div = 0;
  wire clk_pixel = clk_div[1];
  always @(posedge clk or posedge reset)begin 
  if(reset)
  clk_div <= 0;
  else
  clk_div <= clk_div +1;
  end
  reg[9:0]h_count = 0;
  always@(posedge clk_pixel or posedge reset)begin 
  if(reset)
  h_count <= 0;
  else if (h_count == H_total -1)
  h_count <= 0;
  else
  h_count <= h_count + 1;
  end
  assign hsync = ~(h_count >= H_visible + H_front && h_count < H_visible + H_front + H_sync );
  wire h_visible = (h_count < H_visible);
  reg[9:0] v_count = 0;
  always@(posedge clk_pixel or posedge reset)begin 
  if(reset)
  v_count <= 0;
  else if(h_count == H_total -1)begin 
  if(v_count == V_total -1)
  v_count <= 0;
  else
  v_count <= v_count+1;
  end
  end
   assign vsync = ~(v_count >= V_visible + V_front && v_count < V_visible + V_front + V_sync );
  wire v_visible = (v_count < V_visible);
  wire visible_area = h_visible && v_visible;
  always @(*) begin
    if (visible_area) begin
        red = 4'hF;
        green = 4'h0;
        blue = 4'h0;
    end else begin
        red = 4'h0;
        green = 4'h0;
        blue = 4'h0;
    end
end
always @(posedge clk_pixel or posedge reset) begin
        if (reset) begin
            red <= 4'h0;
            green <= 4'h0;
            blue <= 4'h0;
            end else if (visible_area) begin
           
          if (h_count >= 200 && h_count < 400 && v_count >= 100 && v_count < 200) begin
               
                red <= 4'h0;
                green <= 4'hF;
                blue <= 4'h0;
          end else  if (h_count[5] ^ v_count[5]) begin
                
                red <= 4'hF;
                green <= 4'h0;
                blue <= 4'hF;
            end else begin
                
                red <= 4'h0;
                green <= 4'h0;
                blue <= 4'h0;
  
  end
  
       end else begin
            red <= 4'h0;
            green <= 4'h0;
            blue <= 4'h0;
        end
    end
 
   
  
endmodule
/////////////////////////////////////////////////////////////////////////

set_property IOSTANDARD LVCMOS33 [get_ports clk]
set_property IOSTANDARD LVCMOS33 [get_ports reset]
set_property PACKAGE_PIN W5 [get_ports clk]
set_property PACKAGE_PIN V17 [get_ports reset]



set_property IOSTANDARD LVCMOS33 [get_ports {data_bus[3]}]
set_property IOSTANDARD LVCMOS33 [get_ports {data_bus[2]}]
set_property IOSTANDARD LVCMOS33 [get_ports {data_bus[1]}]
set_property IOSTANDARD LVCMOS33 [get_ports {data_bus[0]}]
set_property IOSTANDARD LVCMOS33 [get_ports E]
set_property IOSTANDARD LVCMOS33 [get_ports RS]
set_property IOSTANDARD LVCMOS33 [get_ports RW]
set_property PACKAGE_PIN A14 [get_ports {data_bus[0]}]
set_property PACKAGE_PIN A16 [get_ports {data_bus[1]}]
set_property PACKAGE_PIN B15 [get_ports {data_bus[2]}]
set_property PACKAGE_PIN B16 [get_ports {data_bus[3]}]
set_property PACKAGE_PIN L17 [get_ports RS]
set_property PACKAGE_PIN M19 [get_ports RW]
set_property PACKAGE_PIN P17 [get_ports E]

set_property IOSTANDARD LVCMOS33 [get_ports {data_bus[7]}]
set_property IOSTANDARD LVCMOS33 [get_ports {data_bus[6]}]
set_property IOSTANDARD LVCMOS33 [get_ports {data_bus[5]}]
set_property IOSTANDARD LVCMOS33 [get_ports {data_bus[4]}]
set_property PACKAGE_PIN A15 [get_ports {data_bus[4]}]
set_property PACKAGE_PIN A17 [get_ports {data_bus[5]}]
set_property PACKAGE_PIN C15 [get_ports {data_bus[6]}]
set_property PACKAGE_PIN C16 [get_ports {data_bus[7]}]

