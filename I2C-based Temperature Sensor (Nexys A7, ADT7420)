 module i2c_master(
     input clk_200khz,  // i_clk
     input reset,   //btn
     inout SDA,         //i2c 
     output[7:0]temp_data,          //8 bit temperature data
     output sda_dir,          //direction of inout signL
     output SCL                  //10khz clk 
    );         
    
    reg[3:0]counter = 4'b0;
    reg clk_reg = 1'b1;
    
    
    always@(posedge clk_200khz or posedge reset)
    if (reset)begin 
    counter <= 4'b0;
    clk_reg <= 1'b0;
    end
    else 
    if(counter == 9)begin 
    counter <= 4'b0;
    clk_reg <= ~clk_reg;
    end
    else 
    counter <= counter + 1; 
    
    assign SCL = clk_reg;
    
    parameter [7:0] sensor_addr_plus_read = 8'b1001_0111;
    reg[8:0]tmsb = 8'b0;
    reg[8:0]tlsb = 8'b0;
    reg out_bit = 1'b1;
    reg [11:0] count = 12'b0;
    reg[7:0] temp_data_reg;
    
    localparam [4:0] power_up = 5'h00,
                        start    = 5'h01,
                        send_addr6 = 5'h02,
                        send_addr5 = 5'h03,
                        send_addr4 = 5'h04,
                        send_addr3 = 5'h05,
                        send_addr2 = 5'h06,
                        send_addr1 = 5'h07,
                         send_addr0 = 5'h08,
                         send_rw    = 5'h09,
                         rec_ack    = 5'h0A,
                         rec_msb7   = 5'h0B,
                         rec_msb6   = 5'h0c,
                         rec_msb5   = 5'h0d,
                         rec_msb4   = 5'h0e,
                         rec_msb3   = 5'h0f,
                         rec_msb2   = 5'h10,
                         rec_msb1   = 5'h11,
                         rec_msb0   = 5'h12,
                         send_ack   = 5'h13,
                         rec_lsb7   = 5'h14,
                         rec_lsb6   = 5'h15,
                         rec_lsb5   = 5'h16,
                         rec_lsb4   = 5'h17,
                         rec_lsb3   = 5'h18,
                         rec_lsb2   = 5'h19,
                         rec_lsb1   = 5'h1A,
                         rec_lsb0   = 5'h1B,
                         send_nack  = 5'h1c;
                         
                reg[4:0]state_reg = power_up;
                
                always@(posedge clk_200khz or posedge reset)begin
                if(reset)begin 
                state_reg <= start;
                count <= 12'd2000;
                end      
                else begin 
                count <= count + 1;
                case(state_reg)
                
                power_up : begin 
                          if(count==12'd1999)
                          state_reg <= start;
                end
                start : begin 
                        if(count == 12'd2004)
                        out_bit <= 1'b0;
                        if(count == 12'd2013)
                        state_reg <= send_addr6;
                end
              send_addr6 : begin 
                          out_bit <= sensor_addr_plus_read[7];
                          if(count == 12'd2033)
                          state_reg <= send_addr5;
                          
              end
               send_addr5 : begin 
                          out_bit <= sensor_addr_plus_read[6];
                          if(count == 12'd2053)
                          state_reg <= send_addr4;
                          
              end 
               send_addr4 : begin 
                          out_bit <= sensor_addr_plus_read[5];
                          if(count == 12'd2073)
                          state_reg <= send_addr3;
                          
              end 
               send_addr3 : begin 
                          out_bit <= sensor_addr_plus_read[4];
                          if(count == 12'd2093)
                          state_reg <= send_addr2;
                          
              end 
               send_addr2 : begin 
                          out_bit <= sensor_addr_plus_read[3];
                          if(count == 12'd2113)
                          state_reg <= send_addr1;
                          
              end
               send_addr1 : begin 
                          out_bit <= sensor_addr_plus_read[2];
                          if(count == 12'd2133)
                          state_reg <= send_addr0;
                          
              end 
               send_addr0 : begin 
                          out_bit <= sensor_addr_plus_read[1];
                          if(count == 12'd2153)
                          state_reg <= send_rw;   
              end
              send_rw : begin 
                        out_bit <= sensor_addr_plus_read[0];
                        if(count == 12'd2169)
                        state_reg <= rec_ack;
              end
              
              rec_ack : begin
                       if(count == 12'd2189)
                       state_reg <= rec_msb7;
               end
               
               rec_msb7 : begin 
                         tmsb[7]<= i_bit;
                         if(count == 12'd2209)
                         state_reg <= rec_msb6;
               end
               
               rec_msb6 : begin 
                         tmsb[6]<= i_bit;
                         if(count == 12'd2229)
                         state_reg <= rec_msb5;
               end  
                rec_msb5 : begin 
                         tmsb[5]<= i_bit;
                         if(count == 12'd2249)
                         state_reg <= rec_msb4;
               end 
              
              rec_msb4 : begin 
                         tmsb[4]<= i_bit;
                         if(count == 12'd2269)
                         state_reg <= rec_msb3;
               end  
               
               rec_msb3 : begin 
                         tmsb[3]<= i_bit;
                         if(count == 12'd2289)
                         state_reg <= rec_msb2;
               end  
                rec_msb2 : begin 
                         tmsb[2]<= i_bit;
                         if(count == 12'd2309)
                         state_reg <= rec_msb1;
               end
                   
                   
                   rec_msb1 : begin 
                         tmsb[1]<= i_bit;
                         if(count == 12'd2329)
                         state_reg <= rec_msb0;
               end   
               
               rec_msb0 : begin 
                         tmsb[0]<= i_bit;
                         if(count == 12'd2349)
                         state_reg <= send_ack;
               end
               
               send_ack : begin 
                          if(count == 12'd2369)
                          state_reg <= rec_lsb7;
               end
               
               rec_lsb7 : begin 
                          tlsb[7]<= i_bit;
                          if(count == 12'd2389)
                          state_reg <= rec_lsb6;
               end
               
               rec_lsb6 : begin 
                          tlsb[6]<= i_bit;
                          if(count == 12'd2409)
                          state_reg <= rec_lsb5;
               end
               
               rec_lsb5 : begin 
                          tlsb[5]<= i_bit;
                          if(count == 12'd2429)
                          state_reg <= rec_lsb4;
               end
               
               rec_lsb4 : begin 
                          tlsb[4]<= i_bit;
                          if(count == 12'd2449)
                          state_reg <= rec_lsb3;
               end
               rec_lsb3 : begin 
                          tlsb[3]<= i_bit;
                          if(count == 12'd2469)
                          state_reg <= rec_lsb2;
               end
                
                rec_lsb2 : begin 
                          tlsb[2]<= i_bit;
                          if(count == 12'd2489)
                          state_reg <= rec_lsb1;
               end
               
               rec_lsb1 : begin 
                          tlsb[1]<= i_bit;
                          if(count == 12'd2509)
                          state_reg <= rec_lsb0;
               end
               
                rec_lsb0 : begin 
                          tlsb[0]<= i_bit;
                          if(count == 12'd2529)
                          state_reg <= send_nack;
               end
               
               send_nack : begin 
                      if(count == 12'd2559)
                      count <= 12'd2000;
                      state_reg <= start;
               end  
               
               
                endcase
                  end 
                  end                           
                          
            always@(posedge clk_200khz)
            if(state_reg == send_nack)
            temp_data_reg <= {tmsb[6:0] , tlsb[7]};    
            
            assign sda_dir = (state_reg == power_up || state_reg == start || state_reg == send_addr6|| state_reg == send_addr5|| state_reg == send_addr4 || 
                               state_reg == send_addr3|| state_reg == send_addr2|| state_reg == send_addr1|| state_reg == send_addr0|| state_reg == send_rw|| state_reg == send_ack || state_reg == send_nack ) ? 1:0;
    
    assign sda = sda_dir ? out_bit : 1'bz;
    assign i_bit = sda;
    assign temp_data = temp_data_reg;
     endmodule

