module top(
input clk_100mhz,
input reset,
inout sda,
output scl,
output [6:0]SEG,
output [3:0]AN,
output [3:0]nan,
output [7:0]led
    );
    
    wire sda_dir;
    wire clk_200;
    wire [7:0] w_data;
    
     i2c_master i2c(
    .clk_200khz(clk_200),
    .reset(reset),
    .temp_data(w_data),
    .SDA(sda),
    .sda_dir(sda_dir),
    .SCL(scl)
    ) ;
    
    clk_gen_200khz clkgen(
    .clk_100mhz(clk_100mhz),
    .clk_200khz(clk_200khz)
    
    );
    
    ssd seg1(
    .clk_100mhz( clk_100mhz),
    .temp_data(w_data),
    .seg(seg),
    .na(nan),
    .anode(anode)
    
    );
    
    
    
    
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
module i2c_master(
     input clk_200khz,  // i_clk
     input reset,   //btn
     inout SDA,         //i2c 
     output[7:0]temp_data,          //8 bit temperature data
     output sda_dir,          //direction of inout signL
     output SCL                  //10khz clk 
    );         
    
    reg[3:0]counter = 4'b0;
    reg clk_reg = 1'b1;
    
    
    always@(posedge clk_200khz or posedge reset)
    if (reset)begin 
    counter <= 4'b0;
    clk_reg <= 1'b0;
    end
    else 
    if(counter == 9)begin 
    counter <= 4'b0;
    clk_reg <= ~clk_reg;
    end
    else 
    counter <= counter + 1; 
    
    assign SCL = clk_reg;
    
    parameter [7:0] sensor_addr_plus_read = 8'b1001_0111;
    reg[8:0]tmsb = 8'b0;
    reg[8:0]tlsb = 8'b0;
    reg out_bit = 1'b1;
    reg [11:0] count = 12'b0;
    reg[7:0] temp_data_reg;
    
    localparam [4:0] power_up = 5'h00,
                        start    = 5'h01,
                        send_addr6 = 5'h02,
                        send_addr5 = 5'h03,
                        send_addr4 = 5'h04,
                        send_addr3 = 5'h05,
                        send_addr2 = 5'h06,
                        send_addr1 = 5'h07,
                         send_addr0 = 5'h08,
                         send_rw    = 5'h09,
                         rec_ack    = 5'h0A,
                         rec_msb7   = 5'h0B,
                         rec_msb6   = 5'h0c,
                         rec_msb5   = 5'h0d,
                         rec_msb4   = 5'h0e,
                         rec_msb3   = 5'h0f,
                         rec_msb2   = 5'h10,
                         rec_msb1   = 5'h11,
                         rec_msb0   = 5'h12,
                         send_ack   = 5'h13,
                         rec_lsb7   = 5'h14,
                         rec_lsb6   = 5'h15,
                         rec_lsb5   = 5'h16,
                         rec_lsb4   = 5'h17,
                         rec_lsb3   = 5'h18,
                         rec_lsb2   = 5'h19,
                         rec_lsb1   = 5'h1A,
                         rec_lsb0   = 5'h1B,
                         send_nack  = 5'h1c;
                         
                reg[4:0]state_reg = power_up;
                
                always@(posedge clk_200khz or posedge reset)begin
                if(reset)begin 
                state_reg <= start;
                count <= 12'd2000;
                end      
                else begin 
                count <= count + 1;
                case(state_reg)
                
                power_up : begin 
                          if(count==12'd1999)
                          state_reg <= start;
                end
                start : begin 
                        if(count == 12'd2004)
                        out_bit <= 1'b0;
                        if(count == 12'd2013)
                        state_reg <= send_addr6;
                end
              send_addr6 : begin 
                          out_bit <= sensor_addr_plus_read[7];
                          if(count == 12'd2033)
                          state_reg <= send_addr5;
                          
              end
               send_addr5 : begin 
                          out_bit <= sensor_addr_plus_read[6];
                          if(count == 12'd2053)
                          state_reg <= send_addr4;
                          
              end 
               send_addr4 : begin 
                          out_bit <= sensor_addr_plus_read[5];
                          if(count == 12'd2073)
                          state_reg <= send_addr3;
                          
              end 
               send_addr3 : begin 
                          out_bit <= sensor_addr_plus_read[4];
                          if(count == 12'd2093)
                          state_reg <= send_addr2;
                          
              end 
               send_addr2 : begin 
                          out_bit <= sensor_addr_plus_read[3];
                          if(count == 12'd2113)
                          state_reg <= send_addr1;
                          
              end
               send_addr1 : begin 
                          out_bit <= sensor_addr_plus_read[2];
                          if(count == 12'd2133)
                          state_reg <= send_addr0;
                          
              end 
               send_addr0 : begin 
                          out_bit <= sensor_addr_plus_read[1];
                          if(count == 12'd2153)
                          state_reg <= send_rw;   
              end
              send_rw : begin 
                        out_bit <= sensor_addr_plus_read[0];
                        if(count == 12'd2169)
                        state_reg <= rec_ack;
              end
              
              rec_ack : begin
                       if(count == 12'd2189)
                       state_reg <= rec_msb7;
               end
               
               rec_msb7 : begin 
                         tmsb[7]<= i_bit;
                         if(count == 12'd2209)
                         state_reg <= rec_msb6;
               end
               
               rec_msb6 : begin 
                         tmsb[6]<= i_bit;
                         if(count == 12'd2229)
                         state_reg <= rec_msb5;
               end  
                rec_msb5 : begin 
                         tmsb[5]<= i_bit;
                         if(count == 12'd2249)
                         state_reg <= rec_msb4;
               end 
              
              rec_msb4 : begin 
                         tmsb[4]<= i_bit;
                         if(count == 12'd2269)
                         state_reg <= rec_msb3;
               end  
               
               rec_msb3 : begin 
                         tmsb[3]<= i_bit;
                         if(count == 12'd2289)
                         state_reg <= rec_msb2;
               end  
                rec_msb2 : begin 
                         tmsb[2]<= i_bit;
                         if(count == 12'd2309)
                         state_reg <= rec_msb1;
               end
                   
                   
                   rec_msb1 : begin 
                         tmsb[1]<= i_bit;
                         if(count == 12'd2329)
                         state_reg <= rec_msb0;
               end   
               
               rec_msb0 : begin 
                         tmsb[0]<= i_bit;
                         if(count == 12'd2349)
                         state_reg <= send_ack;
               end
               
               send_ack : begin 
                          if(count == 12'd2369)
                          state_reg <= rec_lsb7;
               end
               
               rec_lsb7 : begin 
                          tlsb[7]<= i_bit;
                          if(count == 12'd2389)
                          state_reg <= rec_lsb6;
               end
               
               rec_lsb6 : begin 
                          tlsb[6]<= i_bit;
                          if(count == 12'd2409)
                          state_reg <= rec_lsb5;
               end
               
               rec_lsb5 : begin 
                          tlsb[5]<= i_bit;
                          if(count == 12'd2429)
                          state_reg <= rec_lsb4;
               end
               
               rec_lsb4 : begin 
                          tlsb[4]<= i_bit;
                          if(count == 12'd2449)
                          state_reg <= rec_lsb3;
               end
               rec_lsb3 : begin 
                          tlsb[3]<= i_bit;
                          if(count == 12'd2469)
                          state_reg <= rec_lsb2;
               end
                
                rec_lsb2 : begin 
                          tlsb[2]<= i_bit;
                          if(count == 12'd2489)
                          state_reg <= rec_lsb1;
               end
               
               rec_lsb1 : begin 
                          tlsb[1]<= i_bit;
                          if(count == 12'd2509)
                          state_reg <= rec_lsb0;
               end
               
                rec_lsb0 : begin 
                          tlsb[0]<= i_bit;
                          if(count == 12'd2529)
                          state_reg <= send_nack;
               end
               
               send_nack : begin 
                      if(count == 12'd2559)
                      count <= 12'd2000;
                      state_reg <= start;
               end  
               
               
                endcase
                  end 
                  end                           
                          
            always@(posedge clk_200khz)
            if(state_reg == send_nack)
            temp_data_reg <= {tmsb[6:0] , tlsb[7]};    
            
            assign sda_dir = (state_reg == power_up || state_reg == start || state_reg == send_addr6|| state_reg == send_addr5|| state_reg == send_addr4 || 
                               state_reg == send_addr3|| state_reg == send_addr2|| state_reg == send_addr1|| state_reg == send_addr0|| state_reg == send_rw|| state_reg == send_ack || state_reg == send_nack ) ? 1:0;
    
    assign sda = sda_dir ? out_bit : 1'bz;
    assign i_bit = sda;
    assign temp_data = temp_data_reg;
     endmodule
////////////////////////////////////////////////////////////////////////////////////////////////////



`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 13.02.2025 10:12:26
// Design Name: 
// Module Name: clk_gen_200khz
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module clk_gen_200khz(
input clk_100mhz,
output clk_200khz

    );
    
    reg[7:0]counter = 8'h00;
    reg clk_reg = 1'b1;
    
    always@(posedge clk_100mhz )begin 
   
    if(counter == 249)begin 
    counter <= 8'h00;
    clk_reg <= ~clk_reg;
    end
    else 
    counter <= counter + 1;
    end
    assign clk_200khz = clk_reg;
endmodule
////////////////////////////////////////////////////////////////////////////////////////////////


//`timescale 1ns / 1ps
////////////////////////////////////////////////////////////////////////////////////
//// Company: 
//// Engineer: 
//// 
//// Create Date: 10.02.2025 12:49:36
//// Design Name: 
//// Module Name: ssd
//// Project Name: 
//// Target Devices: 
//// Tool Versions: 
//// Description: 
//// 
//// Dependencies: 
//// 
//// Revision:
//// Revision 0.01 - File Created
//// Additional Comments:
//// 
////////////////////////////////////////////////////////////////////////////////////


module ssd(
    input clk_100mhz ,
    //input reset,
    input[7:0]temp_data,
    output reg [3:0]anode,
    output reg [3:0]na = 4'hf,
    output reg [6:0]seg
    );
    wire [3:0]tens , ones ;
    assign tens = temp_data /10;
    assign ones = temp_data %10;
  
   parameter zero = 7'b000_0001;
    parameter one = 7'b100_1111;
     parameter two = 7'b001_0010;
      parameter three  = 7'b000_0110;
       parameter four = 7'b100_1101;
        parameter five = 7'b010_0100;
         parameter six = 7'b010_0000;
          parameter seven = 7'b000_1111;
           parameter eight = 7'b000_0000;
            parameter nine = 7'b000_0100;
             parameter deg = 7'b001_1101;
              parameter C = 7'b0011_0001;
   
   reg[1:0]anode_select;
   reg[16:0] anode_timer;
  // Logic for controlling digit select and digit timer
always @(posedge clk_100mhz ) begin
    // 1ms x 4 displays = 4ms refresh period
    if (anode_timer <= 99_999) begin
        anode_timer <= 0;
        anode_select <= anode_select + 1;
    end
    else begin
        anode_timer <= anode_timer + 1;
    end
end

// Logic for driving the 4-bit anode output based on digit select
always @(anode_select) begin
    case (anode_select)
        2'b00: anode = 4'b1110; // Turn on ones digit
        2'b01: anode = 4'b1101; // Turn on tens digit
        2'b10: anode = 4'b1011; // Turn on hundreds digit
        2'b11: anode = 4'b0111; // Turn on thousands digit
    endcase
end

// Logic for segment display based on digit selection
always @* begin
    case (anode_select)
        2'b00: seg = C;    // Set to C for Celsius
        2'b01: seg = deg;  // Set to degrees symbol
        2'b10: begin       // TEMPERATURE ONES DIGIT
            case (ones)
                4'b0000: seg = zero;
                4'b0001: seg = one;
                4'b0010: seg = two;
                4'b0011: seg = three;
                4'b0100: seg = four;
                4'b0101: seg = five;
                4'b0110: seg = six;
                4'b0111: seg = seven;
                4'b1000: seg = eight;
                4'b1001: seg = nine;
            endcase
        end
        2'b11: begin       // TEMPERATURE TENS DIGIT
            case (tens)
                4'b0000: seg = zero;
                4'b0001: seg = one;
                4'b0010: seg = two;
                4'b0011: seg = three;
            endcase
        end
    endcase
end

endmodule
