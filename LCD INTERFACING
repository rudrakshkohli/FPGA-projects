 module LCD_HELLO1(
    input clk,
    input reset,
    output reg RS,
    output reg RW,
    output reg E,
    output reg [7:0] data_bus
);
    reg [6:0] clk_divider;
    reg slow_clk;
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            clk_divider <= 0;
            slow_clk <= 0;
        end else if (clk_divider == 99) begin
            clk_divider <= 0;
            slow_clk <= ~slow_clk;
        end else begin
            clk_divider <= clk_divider + 1;
        end
    end

    parameter [3:0] power_on = 4'b0000,
                    set_funct = 4'b0001,
                    display_set = 4'b0010,
                    return_home = 4'b0011,
                    clear_display = 4'b0100,
                    display_chars = 4'b0101;

    reg [3:0] state;
    reg [19:0] delay_counter;
    reg [2:0] char_index;
    reg [7:0] hello_data[0:4]; // Array for "HELLO" characters

    initial begin
        hello_data[0] = 8'h48; // 'H'
        hello_data[1] = 8'h45; // 'E'
        hello_data[2] = 8'h6C; // 'L'
        hello_data[3] = 8'h6C; // 'L'
        hello_data[4] = 8'h4F; // 'O'
    end

    always @(posedge slow_clk or posedge reset) begin
        if (reset) begin
            state <= power_on;
            RS <= 0;
            RW <= 0;
            E <= 0;
            data_bus <= 0;
            delay_counter <= 0;
            char_index <= 0;
        end else 
            case (state)
                power_on: begin
                    RS <= 0;
                    RW <= 0;
                    E <= 0;
                    if (delay_counter == 20000) begin
                        state <= set_funct;
                        E <= 1;
                    end else begin
                        delay_counter <= delay_counter + 1;
                    end
                end

                set_funct: begin
                    RS <= 0;
                    RW <= 0;
                    E <= 0;
                    data_bus <= 8'h3C;
                    if (delay_counter == 20000) begin
                        E <= 1;
                        state <= display_set;
                    end else begin
                        delay_counter <= delay_counter + 1;
                    end
                end

                display_set: begin
                    RS <= 0;
                    RW <= 0;
                    E <= 0;
                    data_bus <= 8'h0C;
                    if (delay_counter == 37) begin
                        E <= 1;
                        state <= clear_display;
                    end else begin
                        delay_counter <= delay_counter + 1;
                    end
                end

                clear_display: begin
                    RS <= 0;
                    RW <= 0;
                    E <= 0;
                    data_bus <= 8'h01;
                    if (delay_counter == 37) begin
                        E <= 1;
                        state <= return_home;
                    end else begin
                        delay_counter <= delay_counter + 1;
                    end
                end

                return_home: begin
                    RS <= 0;
                    RW <= 0;
                    E <= 0;
                    data_bus <= 8'h02;
                    if (delay_counter == 1520) begin
                        E <= 1;
                        state <= display_chars;
                    end else begin
                        delay_counter <= delay_counter + 1;
                    end
                end

                display_chars: begin
                    if (char_index < 5) begin
                    RS <= 1;
                    RW <= 0;
                    E <= 0;
                    data_bus <= hello_data[char_index];
                    
                         if (delay_counter == 1520)begin
                            E <= 1;
                            delay_counter <= 0;
                            char_index <= char_index + 1;
                         end
                         else
                            delay_counter <= delay_counter + 1;
                         end
                     else
                        state <= return_home;
                    
//                    
                end
                default: state <= power_on;
            endcase
    end
endmodule


////////////////////////////////////////////////////////////////////////////////////////////////////////


set_property IOSTANDARD LVCMOS33 [get_ports clk]
set_property IOSTANDARD LVCMOS33 [get_ports reset]
set_property PACKAGE_PIN W5 [get_ports clk]
set_property PACKAGE_PIN V17 [get_ports reset]



set_property IOSTANDARD LVCMOS33 [get_ports {data_bus[3]}]
set_property IOSTANDARD LVCMOS33 [get_ports {data_bus[2]}]
set_property IOSTANDARD LVCMOS33 [get_ports {data_bus[1]}]
set_property IOSTANDARD LVCMOS33 [get_ports {data_bus[0]}]
set_property IOSTANDARD LVCMOS33 [get_ports E]
set_property IOSTANDARD LVCMOS33 [get_ports RS]
set_property IOSTANDARD LVCMOS33 [get_ports RW]
set_property PACKAGE_PIN A14 [get_ports {data_bus[0]}]
set_property PACKAGE_PIN A16 [get_ports {data_bus[1]}]
set_property PACKAGE_PIN B15 [get_ports {data_bus[2]}]
set_property PACKAGE_PIN B16 [get_ports {data_bus[3]}]
set_property PACKAGE_PIN L17 [get_ports RS]
set_property PACKAGE_PIN M19 [get_ports RW]
set_property PACKAGE_PIN P17 [get_ports E]

set_property IOSTANDARD LVCMOS33 [get_ports {data_bus[7]}]
set_property IOSTANDARD LVCMOS33 [get_ports {data_bus[6]}]
set_property IOSTANDARD LVCMOS33 [get_ports {data_bus[5]}]
set_property IOSTANDARD LVCMOS33 [get_ports {data_bus[4]}]
set_property PACKAGE_PIN A15 [get_ports {data_bus[4]}]
set_property PACKAGE_PIN A17 [get_ports {data_bus[5]}]
set_property PACKAGE_PIN C15 [get_ports {data_bus[6]}]
set_property PACKAGE_PIN C16 [get_ports {data_bus[7]}]

