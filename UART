////////////////////////////////////////////////////////////////////////////////
## WITHOUT LOOP BACK
module uart_rx_tx_top(
input clk,
input rst,
input rx,
output reg[7:0]data_out,
output reg data_ready,
input[7:0]data_in,
input start,
output reg tx ,
output reg busy
 );
 UART_TX T1(.clk(clk) ,.rst(rst) ,.data_in(data_in),.start(start),.tx(tx) ,.busy(busy));
UART_RX R1(.clk(clk),.rst(rst),.rx(rx),.data_out(data_out),.data_ready(data_ready));
endmodule


////////////////////////////////////////////////////////////////////////////////////////////
module UART_TX(
input clk ,
input rst ,
input baud_clk,
input[7:0]data_in,
input start,
output reg tx ,
output reg busy
 );
 parameter [2:0]
 IDLE = 3'b000,
 START = 3'b001,
 DATA = 3'b010,
 STOP = 3'b011;
 parameter baud_div = (100000000/9600);
 
 reg[2:0] state , nxt;
 reg[3:0]bit_count;
 reg[7:0]shift_reg;
 
 always@(posedge baud_div or posedge rst)begin
 if (rst)
 state <= IDLE;
 else
 state <= nxt;
 end
 always@(*)begin 
 case(state)
 IDLE : begin 
 if(start)
 nxt <= START;
 else
 nxt <= IDLE;
 end
 START : begin 
 if(bit_count==8)
 nxt <= DATA;
 else
 nxt <= START;
 end
 DATA : begin
 if(bit_count==8)
 nxt <= STOP;
 else
 nxt <= DATA; 
 end
 STOP : begin 
 nxt <= IDLE;
 end
 default : nxt <= IDLE;
 endcase
 end
 always@(posedge baud_div or posedge rst)begin 
 if(rst)begin 
 tx <= 1;
 busy <= 0;
 bit_count <= 0;
 shift_reg <=0; 
 end 
 else begin 
 case(state)
 IDLE : begin 
 tx <= 1;
 busy <= 0;
 end
 START : begin 
 tx <= 0;
 busy <= 1;
 end
 DATA : begin 
 tx <= shift_reg[0];
 shift_reg <= shift_reg >> 1;
 bit_count <= bit_count + 1;
 end 
 STOP :begin 
 tx <= 1;
 busy <= 0;
 bit_count <= 0;
 end
 endcase
 end
 end
 always@(posedge clk)begin 
 if(start)
 shift_reg <= data_in;
 end
endmodule
///////////////////////////////////////////////////////////////////////////////////////////////////////
`timescale 1ns / 1ps
////////////////////////////


module UART_RX(
input clk,
input rst,
//input baud_clk,
input rx,
output reg[7:0]data_out,
output reg data_ready
 );
 parameter [2:0]
 IDLE = 3'b000,
 START = 3'b001,
 DATA = 3'b010,
 STOP = 3'b011;
 parameter baud_div = (100000000/9600);
 reg [2:0]state , nxt;
 reg[3:0]bit_count;
 reg[7:0]shift_reg;
 
 always@(posedge baud_div or posedge clk)begin
 if(rst)
 state <= IDLE;
 else
 state <= nxt;
 end  
 always@(*)begin 
 case(state)
 IDLE : begin 
 if(rx==0)
 nxt <= START;
 else
 nxt <= IDLE;
 end
 START : begin 
 nxt <= DATA;
 end
 DATA : begin
 if(bit_count == 8)
 nxt <= STOP;
 else 
 nxt <= DATA;
 end
 STOP : begin 
 nxt <= IDLE;
 end
 default : nxt <= IDLE;
 endcase
 end
 always@(posedge baud_div or posedge rst)begin 
 if(rst)begin 
 data_out <= 0;
 data_ready <= 0;
 bit_count <= 0;
 shift_reg <= 0;
 end
 else begin 
 case(state)
 IDLE : begin 
 data_ready <= 0;
 bit_count <= 0;
 end
 START : begin
 bit_count <= 0;
 end
 DATA : begin 
 shift_reg <= {rx,shift_reg[7:1]};
 bit_count <= bit_count + 1;
 end
 STOP :begin 
 data_out <= shift_reg;
 data_ready <= 1;
 bit_count <= 0;
 end
 endcase
 end
 end
endmodule

//////////////////////////////////////////////////////////////////////////////////////////////////////


